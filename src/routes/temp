<script>
  import { Canvas, InteractiveObject, OrbitControls, T } from '@threlte/core';
  import { spring } from 'svelte/motion';
  import { Color, TorusGeometry, Float32BufferAttribute } from 'three';
  import { degToRad } from 'three/src/math/MathUtils'; // Updated import
  import * as BufferGeometryUtils from 'three/examples/jsm/utils/BufferGeometryUtils.js';

  const colors = [
    new Color('lightgreen'),
    new Color('green'),
    new Color('darkgreen'),
  ];
  const scale = spring(1);

  const segmentCount = colors.length;
  const totalAngle = Math.PI * 2;
  const segmentAngle = totalAngle / segmentCount;

  function createSegment(color, startAngle) {
    console.log('Creating segment with color:', color, 'and start angle:', startAngle);
  const geometry = new TorusGeometry(1, 0.4, 8, 8, segmentAngle);
  geometry.rotateY(startAngle);
  geometry.computeVertexNormals();
  }

  const segmentGeometries = colors.map((color, index) => {
    const startAngle = index * segmentAngle;
    return createSegment(color, startAngle);
  });

  const mergedGeometry = BufferGeometryUtils.mergeBufferGeometries(segmentGeometries);

  $: console.log('Scale:', $scale);
</script>

<div>
  <Canvas>
    <T.PerspectiveCamera makeDefault position={[5, 5, 5]} fov={24}>
      <OrbitControls maxPolarAngle={degToRad(80)} enableZoom={false} target={{ y: 0.5 }} />
    </T.PerspectiveCamera>

    <T.DirectionalLight castShadow position={[3, 10, 10]} />
    <T.DirectionalLight position={[-3, 10, -10]} intensity={0.2} />
    <T.AmbientLight intensity={0.2} />

    <!-- Doughnut (Torus) -->
    <T.Mesh position.y={0.5} scale={$scale} castShadow let:ref> <!-- Added scale={$scale} -->
      <InteractiveObject
        object={ref}
        interactive
        on:pointerenter={() => ($scale = 2)}
        on:pointerleave={() => ($scale = 1)}
      />
      {#if ref}
        { console.log('Position:', ref.position, 'Scale:', ref.scale, 'Material:', ref.material)}
        {#if ref.geometry && ref.geometry.attributes}
          { console.log('Position attribute:', ref.geometry.attributes.position)}
          { console.log('Color attribute:', ref.geometry.attributes.color)}
          { console.log('UV attribute:', ref.geometry.attributes.uv)}
        {/if}
      {/if}
      <T.BufferGeometry geometry={mergedGeometry} />
      <T.MeshStandardMaterial vertexColors />
    </T.Mesh>

    <!-- Floor -->
    <T.Mesh receiveShadow rotation.x={degToRad(-90)}>
      <T.CircleGeometry args={[3, 72]} />
      <T.MeshStandardMaterial color="white" />
    </T.Mesh>
  </Canvas>
</div>

<style>
  div {
    height: 100%;
    width: 100%;
  }
</style>

<h1>Welcome to SvelteKit</h1>
<p>Visit <a href="https://kit.svelte.dev">kit.svelte.dev</a> to read the documentation</p>
